Resources:
  booksD6A29941:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: author
          KeyType: HASH
        - AttributeName: title
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: author
          AttributeType: S
        - AttributeName: title
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books/Resource
  updateBooksLambdaFunctionServiceRole7D76FA54:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:/aws/lambda/*
            Version: "2012-10-17"
          PolicyName: LambdaFunctionServiceRolePolicy
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/updateBooks/LambdaFunctionServiceRole/Resource
  updateBooksLambdaFunctionServiceRoleDefaultPolicy76EFA6C1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - booksD6A29941
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: updateBooksLambdaFunctionServiceRoleDefaultPolicy76EFA6C1
      Roles:
        - Ref: updateBooksLambdaFunctionServiceRole7D76FA54
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/updateBooks/LambdaFunctionServiceRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.
  updateBooksLambdaFunctionE84355BC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const aws = require('aws-sdk');
                  const ddb = new aws.DynamoDB.DocumentClient({ apiVersion: '2012-08-10' });
                  
                  exports.handler = async(event) => {
                      //print the jwt informaton to debug the values..
                      console.log(event.requestContext.authorizer.jwt);
                      try {
                          const requestBody = JSON.parse(event.body);
                          const params = {
                              TableName: process.env.DDB_TABLE_NAME,
                              Item: {
                                  author: 'user#' + event.requestContext.authorizer.jwt.claims.preferred_username,
                                  title: 'title#' + requestBody.title,
                                  category: requestBody.category,
                                  desc: requestBody.desc,
                                  timeCreated: new Date().toISOString()
                              }
                          };
                          await ddb.put(params).promise();
                          return {
                              data: "update successfully"
                          }
                      }
                      catch (error) {
                          console.error(error);
                      }
                  };
      Role:
        Fn::GetAtt:
          - updateBooksLambdaFunctionServiceRole7D76FA54
          - Arn
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DDB_TABLE_NAME:
            Ref: booksD6A29941
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 30
      TracingConfig:
        Mode: Active
    DependsOn:
      - updateBooksLambdaFunctionServiceRoleDefaultPolicy76EFA6C1
      - updateBooksLambdaFunctionServiceRole7D76FA54
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/updateBooks/LambdaFunction/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.
          - id: W89
            reason: This is not a rule for the general case, just for specific use cases/industries
          - id: W92
            reason: Impossible for us to define the correct concurrency for clients
  queryBooksLambdaFunctionServiceRoleA37A482D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:/aws/lambda/*
            Version: "2012-10-17"
          PolicyName: LambdaFunctionServiceRolePolicy
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/queryBooks/LambdaFunctionServiceRole/Resource
  queryBooksLambdaFunctionServiceRoleDefaultPolicy18341A8D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - booksD6A29941
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: queryBooksLambdaFunctionServiceRoleDefaultPolicy18341A8D
      Roles:
        - Ref: queryBooksLambdaFunctionServiceRoleA37A482D
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/queryBooks/LambdaFunctionServiceRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.
  queryBooksLambdaFunctionF7B3FE13:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

                  exports.handler = async(event) => {
                      try {
                          const dynamoDB = new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10' });
                          var allData = [];
                          var data;
                  
                          // continue scanning if we have more books,
                          // since scan can retrieve a maximum of 1MB of data
                          var params = {
                              TableName: process.env.DDB_TABLE_NAME
                          };
                          do {
                              data = await dynamoDB.scan(params).promise();
                              allData.push(...data.Items);
                              params.ExclusiveStartKey = data.LastEvaluatedKey;
                          } while (typeof data.LastEvaluatedKey != "undefined");
                          return {
                              itemSize: allData.length,
                              data: allData
                          }
                      }
                      catch (error) {
                          console.error(error);
                      }
                  };
      Role:
        Fn::GetAtt:
          - queryBooksLambdaFunctionServiceRoleA37A482D
          - Arn
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DDB_TABLE_NAME:
            Ref: booksD6A29941
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 30
      TracingConfig:
        Mode: Active
    DependsOn:
      - queryBooksLambdaFunctionServiceRoleDefaultPolicy18341A8D
      - queryBooksLambdaFunctionServiceRoleA37A482D
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/queryBooks/LambdaFunction/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.
          - id: W89
            reason: This is not a rule for the general case, just for specific use cases/industries
          - id: W92
            reason: Impossible for us to define the correct concurrency for clients
  booksservicetest2741563D:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: books-service-test
      ProtocolType: HTTP
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/Resource
  booksservicetestDefaultStage0062BEEB:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      StageName: $default
      AutoDeploy: true
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/DefaultStage/Resource
  booksservicetestrelease50C498F2:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      StageName: release
      AutoDeploy: true
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/release/Resource
  booksservicetestGETbooksqueryBooks02E595C7:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - queryBooksLambdaFunctionF7B3FE13
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/GET--books/queryBooks/Resource
  booksservicetestGETbooksqueryBooksPermissionA1440103:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - queryBooksLambdaFunctionF7B3FE13
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: booksservicetest2741563D
            - /*/*/books
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/GET--books/queryBooks-Permission
  booksservicetestGETbooks70ED6188:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      RouteKey: GET /books
      AuthorizationType: NONE
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: booksservicetestGETbooksqueryBooks02E595C7
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/GET--books/Resource
  booksservicetestPOSTbooksupdateBooks9A50D75B:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - updateBooksLambdaFunctionE84355BC
          - Arn
      PayloadFormatVersion: "2.0"
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/POST--books/updateBooks/Resource
  booksservicetestPOSTbooksupdateBooksPermission6C1687E8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - updateBooksLambdaFunctionE84355BC
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: booksservicetest2741563D
            - /*/*/books
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/POST--books/updateBooks-Permission
  booksservicetestPOSTbooks33C622E4:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      RouteKey: POST /books
      AuthorizationType: JWT
      AuthorizerId:
        Ref: booksservicetestBooksAuthorizer01339D31
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: booksservicetestPOSTbooksupdateBooks9A50D75B
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/POST--books/Resource
  booksservicetestBooksAuthorizer01339D31:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: booksservicetest2741563D
      AuthorizerType: JWT
      Name: BooksAuthorizer
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          Ref: jwtAudience
        Issuer:
          Ref: jwtIssuer
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/books-service-test/BooksAuthorizer/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/01QQW7DIBB8i++YOFZb9dg0UdVKlWq5uVdrTBwSAxYsiVzkvxdwUvnCzswOmtGW1JeP1BcZXG3O2nPei4b6bwR2JkH68e2oQOo2iHtoek62B5XARARI6ms9a2lWuhdsjHRGE+lBNi1Q/+YUQ6FV3C1xxY0U1gY2ERhEB8ivMF5K6sNyM4joCWW6lPGhkHcG7n9r7TDpG4dHbcQvN9NEam61MywtKjAgOXITyZfDwWH6uLBstWoFpvwih344Ai2yl9sxVnEua90c/h1xiO3inOtFNBeKaNk0eZcNn+8JVvcuWkJWeNA4hjZFzlfL/0//mfhe75Kwe52I0i2nJ7u6rJ/o+oGW2ckKkRunUEhO63n+AdCFgDrcAQAA
    Metadata:
      aws:cdk:path: ApiGatewayKeycloakStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  jwtIssuer:
    Type: String
    Description: The JWT Issuer URL
  jwtAudience:
    Type: CommaDelimitedList
    Description: The the JWT token audience
Outputs:
  apigatewayurl:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: booksservicetest2741563D
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /release/books
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2